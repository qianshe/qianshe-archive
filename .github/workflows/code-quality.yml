name: Code Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Upload ESLint report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.json
          retention-days: 7

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        workspace:
          - { name: 'root', path: '.' }
          - { name: 'dashboard-frontend', path: 'dashboard/frontend' }
          - { name: 'portfolio-frontend', path: 'portfolio/frontend' }
          - { name: 'dashboard-worker', path: 'dashboard/worker' }
          - { name: 'portfolio-worker', path: 'portfolio/worker' }

    defaults:
      run:
        working-directory: ${{ matrix.workspace.path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace.path }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Check package.json consistency
        run: node ../../scripts/check-package-scripts.js
        if: matrix.workspace.name == 'root'

      - name: Generate dependency graph
        run: npm ls --json > dependency-graph.json || true

      - name: Upload dependency graph
        uses: actions/upload-artifact@v4
        with:
          name: dependency-graph-${{ matrix.workspace.name }}
          path: dependency-graph.json
          retention-days: 30

  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        workspace:
          - { name: 'dashboard-frontend', path: 'dashboard/frontend' }
          - { name: 'portfolio-frontend', path: 'portfolio/frontend' }
          - { name: 'dashboard-worker', path: 'dashboard/worker' }
          - { name: 'portfolio-worker', path: 'portfolio/worker' }

    defaults:
      run:
        working-directory: ${{ matrix.workspace.path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace.path }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test
        continue-on-error: true

      - name: Upload test coverage
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.workspace.name }}
          path: coverage/
          retention-days: 30

  performance-check:
    name: Performance and Bundle Analysis
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check]

    strategy:
      matrix:
        workspace:
          - { name: 'dashboard-frontend', path: 'dashboard/frontend' }
          - { name: 'portfolio-frontend', path: 'portfolio/frontend' }

    defaults:
      run:
        working-directory: ${{ matrix.workspace.path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace.path }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          npm run build
          npx webpack-bundle-analyzer dist/static/js/*.js --report bundle-report.html --mode static || true

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ matrix.workspace.name }}
          path: bundle-report.html
          retention-days: 30

  quality-report:
    name: Quality Report Generation
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, dependency-check, build-test, performance-check]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate quality report
        run: node scripts/generate-quality-report.js

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.html
          retention-days: 90

      - name: Comment PR with quality report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              const reportPath = 'quality-report.html';
              if (fs.existsSync(reportPath)) {
                const report = fs.readFileSync(reportPath, 'utf8');

                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## ðŸ“Š Code Quality Report\n\nGenerated quality report is available in the artifacts.\n\n[Download Quality Report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
                });
              }
            } catch (error) {
              console.log('Error creating PR comment:', error);
            }